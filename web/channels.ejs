<div class="prompt" lol="true">
    <div class="interactionArea"></div>
</div>
<div class="sidebar">
    <div class="profile"><img src=""></div>
    <div class="smallLine"></div>
    <div class="serverListContainer"></div>
    <div class="smallLine"></div>
    <div class="create" onclick=""></div>
    <div class="join" onclick="handleJoinServer"></div>

</div>
<div class="serverPanel">
    <div class="header">
        <p class="name"><b>Loading...</b></p>
    </div>
    <div class="channelContainer"></div>
</div>
<div class="channelArea">
    <div class="channelHeader">
        <p class="name">Loading...</p>
        <div class="smallLineVertical"></div>
        <p class="desc">Loading...</p>
        <div class="smallLineVertical"></div>
        <div class="delButton" onclick="deleteChannel(this)"></div>
    </div>
    <div class="messageArea"></div>
    <div class="sendMessageBox">
        <input class="messageInput" placeholder="bukkybox sux!! (me = 🤓🤓🤓🤓)">
        <div class="attachmentArea"></div>

        <label class="fileUploadLabel" for="fileUpload">
            <div>+</div>
        </label><input name="fileUpload" type="file" id="fileUpload" hidden></input>
    </div>

</div>
<div class="memberList">

</div>
<script>



    getServers()
    initial()
    loadChannelMesages("638b815b4d55b470d9d6fa19")


    setInterval(function () {

        if (scrollLock) document.querySelector(".channelArea >.messageArea").scrollTo(0, document.querySelector(".channelArea >.messageArea").scrollHeight)
        currentChannel.render()

    }, 1000)

    setInterval(function () {
        h += 1
        console.log("[info] Refreshing user, message, and server cache")
        var cache = JSON.parse(window.sessionStorage.getItem("quickloadCache"));
        getServers()
        loadUsersList(cache[`https://lq.litdevs.org/v1/quark/${selectedServer}`].members, true)

        loadChannelMesages(selectedChannel)
        initial()
    }, 1000 * 20)

    document.querySelector(".create").onclick = handleCreateServer
    document.querySelector(".join").onclick = handleJoinServer


    document.getElementById("fileUpload").addEventListener("change", async (e) => {

        const fileInput = document.getElementById("fileUpload");
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
            let id = uuid()
            attachments[id] = { res: reader.result.split(",")[1], name: e.target.files[0].name, id: id }
            attachments.list.push(`[attachment-${id}]`)
            check()
            document.querySelector(".messageInput").value += ` [attachment-${id}] `
        };
        reader.readAsDataURL(file);




    })

    function check() {
        let value = document.querySelector(".messageInput").value

        if (attatchify(value).length == 0) {
            document.querySelector(".sendMessageBox>.attachmentArea").innerHTML = ``
            document.querySelector(".sendMessageBox>.attachmentArea").classList.remove("show")
        } else if (attatchify(value).length != document.querySelector(".sendMessageBox>.attachmentArea").childElementCount) {
            document.querySelector(".sendMessageBox>.attachmentArea").innerHTML = ``
            let x = (attatchify(value).slice(0, 10))
            x.forEach(element => {
                document.querySelector(".sendMessageBox>.attachmentArea").innerHTML += `<div class="attachmentCard"><a class="attachmentName">${attachments[element.id].name}</a></div>`
                document.querySelector(".sendMessageBox>.attachmentArea").classList.add("show")
            });
        }

    }

    setInterval(check, 100)



    document.querySelector(".messageInput").onkeydown = async function (e) {
        if (!e) e = window.event;
        let value = document.querySelector(".messageInput").value
        var keyCode = e.code || e.key;

        if (keyCode == 'Enter') {
            document.querySelector(".messageInput").value = ""
            var cache = JSON.parse(window.sessionStorage.getItem("quickloadCache"));
            let x = {}
            if (cache != null && cache["https://lq.litdevs.org/v1/user/me"] != undefined) x = cache["https://lq.litdevs.org/v1/user/me"]
            let val = value.replaceAll(/(\[attachment-)[a-z0-9]{12}(\])/g, "")
            if (val.length == 0) val = value
            let temp = await fetch(`https://lq.litdevs.org/v1/channel/${selectedChannel}/messages`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${document.cookie.split("=")[1]}`,
                    "Content-Type": "Application/json",
                    "lq-agent": `blamequark/0.1.3`
                },
                body: JSON.stringify({ "content": val, "attachments": attatchify(value, true) })
            })
            let y = await temp.json()
            document.querySelector(".channelArea >.messageArea").scrollTo(0, document.querySelector(".channelArea >.messageArea").scrollHeight)
            scrollLock = true;


        }
    }
    document.onkeypress = async function (e) {
        if (typeof e.path !== "undefined" && e.path[0] != undefined && e.path[0].className != "text" && e.path[0].className != "new") document.querySelector(".messageInput").focus()
    }
    document.querySelector(".channelArea >.messageArea").onscroll = async function (e) {
        let heightOld = document.querySelector(".channelArea >.messageArea").scrollHeight

        var st = window.pageYOffset || document.documentElement.scrollTop;
        if (document.querySelector(".channelArea >.messageArea").scrollTop == 0) {
            let x;

            try {
                x = (document.querySelector(".channelArea >.messageArea").children[0].getAttribute("timestamp"))
            } catch (e) {
                x = Date.now() - 1000 * 60
            }
            await loadChannelMesages(selectedChannel, x)
            await currentChannel.validate(currentChannel.messages)
            await currentChannel.render()
            let heightNew = document.querySelector(".channelArea >.messageArea").scrollHeight
            document.querySelector(".channelArea >.messageArea").scrollTo(0, heightNew - heightOld)

        }
        if (st > lastScrollTop) {
            scrollLock = true;
        } else {
            scrollLock = false;
            if ((document.querySelector(".channelArea >.messageArea").offsetHeight + document.querySelector(".channelArea >.messageArea").scrollTop) == document.querySelector(".channelArea >.messageArea").scrollHeight) scrollLock = true;
        }
        lastScrollTop = st <= 0 ? 0 : st; // 
    }
    ws = new WebSocket("wss://lq-gateway.litdevs.org", `${document.cookie.split("=")[1]}`)
    ws.onopen = function () {
        ws.send(JSON.stringify({ "event": "heartbeat", "message": "boop" }))
        ws.send(JSON.stringify({ "event": "subscribe", "message": `channel_${selectedChannel}` }))
        ws.send(JSON.stringify({ "event": "subscribe", "message": `quark_${selectedServer}` }))

    }
    setInterval(function () {
        ws.send(JSON.stringify({ "event": "heartbeat", "message": "boop" }))
    }, 25000)


    ws.onmessage = (msg) => {
        let data = JSON.parse(msg.data)
        console.log("[socket]", data.event || data.eventId)
        if (data.eventId == "messageCreate" && data.message.channelId == selectedChannel) {
            currentChannel.messages.push(new Message(data))
            currentChannel.validate(currentChannel.messages)
            currentChannel.render()
        }
        if (data.eventId == "messageDelete" && data.message.channelId == selectedChannel) {
            let x = currentChannel.messages.findIndex(e => e._id == data.message._id)
            console.log(x)
            currentChannel.messages.splice(x, 1);
            currentChannel.validate(currentChannel.messages)
            currentChannel.render()
        }
        if (data.eventId == "channelDelete" && data.quark._id == selectedServer) {
            let refresh = false;
            if (data.channel._id == selectedChannel) refresh = true;
            loadServer(data.quark._id, refresh)
        }
        if (data.eventId == "channelCreate" && data.quark._id == selectedServer) {
            loadServer(data.quark._id, false)
        }
        if (data.eventId == "messageUpdate" && data.message.channelId == selectedChannel) {
            let x = currentChannel.messages.findIndex(e => e._id == data.message._id)
            console.log({ ...currentChannel.messages[x].raw, ...data })
            currentChannel.messages[x] = new Message({ ...currentChannel.messages[x].raw, ...data })
            currentChannel.validate(currentChannel.messages)
            currentChannel.render()
        }
    }
    ws.onclose = () => {
        window.location.href = window.location.href
    }
    window.addEventListener('paste', e => {

        if (e.clipboardData.files.length == 0) return
        const file = e.clipboardData.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
            let id = uuid()
            attachments[id] = { res: reader.result.split(",")[1], name: 'clipboard-attachment', id: id }
            attachments.list.push(`[attachment-${id}]`)
            check()
            document.querySelector(".messageInput").value += ` [attachment-${id}] `
        };
        reader.readAsDataURL(file);

    });

</script>